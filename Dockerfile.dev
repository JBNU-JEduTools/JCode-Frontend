# 1단계: 빌드 단계
FROM node:20-alpine AS build
WORKDIR /app

# 종속성 설치
COPY package*.json ./
RUN npm install

# .env.dev 파일을 먼저 복사
COPY .env.dev .env

# 소스 코드 복사 및 빌드
COPY . .
# 개발 환경 설정
ENV NODE_ENV=development
# 개발용 소스맵 생성 활성화
ENV GENERATE_SOURCEMAP=true
RUN npm run build

# 중간 단계: 정적 파일 최적화
FROM node:20-alpine AS optimize
WORKDIR /app
COPY --from=build /app/build /app/build
# 개발 환경에서는 최적화 단계 간소화
# HTML 최적화는 유지하되 덜 공격적인 옵션 사용
RUN npm install -g html-minifier-terser
RUN find /app/build -name "*.html" -exec html-minifier-terser --collapse-whitespace --remove-redundant-attributes {} -o {} \;

# 2단계: 개발 환경 서비스 단계
FROM nginx:stable-alpine
COPY --from=optimize /app/build /usr/share/nginx/html

# Nginx 설정 파일 복사 (개발용 설정)
COPY ./nginx/dev.conf /etc/nginx/conf.d/default.conf

# 기본 압축 설정만 적용
RUN echo 'gzip on; \
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;' > /etc/nginx/conf.d/gzip.conf

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]